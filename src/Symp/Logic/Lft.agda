--------------------------------------------------------------------------------
-- Proof rules on the lifetime
--------------------------------------------------------------------------------

{-# OPTIONS --without-K --sized-types #-}

module Syho.Logic.Lft where

open import Base.Func using (_$_)
open import Base.Size using (ùïä)
open import Base.Ratp using (‚Ñö‚Å∫; _/2‚Å∫; /2‚Å∫-merge; /2‚Å∫-split)
open import Syho.Logic.Prop using (Lft; _‚àó_; [_]·¥∏‚ü®_‚ü©; ‚Ä†·¥∏_)
open import Syho.Logic.Core using (_‚ä¢[_]_; Pers; _¬ª_; Pers-‚áí‚ñ°)

-- Import and re-export
open import Syho.Logic.Judg public using ([]·¥∏‚ü®‚ü©-resp; []·¥∏‚ü®‚ü©-merge; []·¥∏‚ü®‚ü©-split;
  []·¥∏‚ü®‚ü©-‚â§1; ‚Ä†·¥∏-‚áí‚ñ°; []·¥∏‚ü®‚ü©-‚Ä†·¥∏-no; []·¥∏-new; []·¥∏-kill)

private variable
  Œπ :  ùïä
  Œ± :  Lft
  p :  ‚Ñö‚Å∫

abstract

  ------------------------------------------------------------------------------
  -- On the lifetime

  -->  []·¥∏‚ü®‚ü©-‚â§1 :  [ Œ± ]·¥∏‚ü® p ‚ü©  ‚ä¢[ Œπ ]  ‚åú p ‚â§1·¥ø‚Å∫ ‚åù

  -->  []·¥∏‚ü®‚ü©-‚Ä†·¥∏-no :  [ Œ± ]·¥∏‚ü® p ‚ü©  ‚àó  ‚Ä†·¥∏ Œ±  ‚ä¢[ Œπ ]  ‚ä•'

  -->  []·¥∏-new :  ‚ä§'  ‚ä¢[ Œπ ] ‚§á  ‚àÉ Œ± , [ Œ± ]·¥∏

  -->  []·¥∏-kill :  [ Œ± ]·¥∏  ‚ä¢[ Œπ ] ‚§á  ‚Ä†·¥∏ Œ±

  instance

    -- The dead lifetime token is persistent

    -->  ‚Ä†·¥∏-‚áí‚ñ° :  ‚Ä†·¥∏ Œ±  ‚ä¢[ Œπ ]  ‚ñ° ‚Ä†·¥∏ Œ±

    ‚Ä†·¥∏-Pers :  Pers $ ‚Ä†·¥∏ Œ±
    ‚Ä†·¥∏-Pers .Pers-‚áí‚ñ° =  ‚Ä†·¥∏-‚áí‚ñ°

  -- On the fraction

  -->  []·¥∏‚ü®‚ü©-resp :  p ‚âà·¥ø‚Å∫ q  ‚Üí   [ Œ± ]·¥∏‚ü® p ‚ü©  ‚ä¢[ Œπ ]  [ Œ± ]·¥∏‚ü® q ‚ü©

  -->  []·¥∏‚ü®‚ü©-merge :  [ Œ± ]·¥∏‚ü® p ‚ü©  ‚àó  [ Œ± ]·¥∏‚ü® q ‚ü©  ‚ä¢[ Œπ ]  [ Œ± ]·¥∏‚ü® p +·¥ø‚Å∫ q ‚ü©

  -->  []·¥∏‚ü®‚ü©-split :  [ Œ± ]·¥∏‚ü® p +·¥ø‚Å∫ q ‚ü©  ‚ä¢[ Œπ ]  [ Œ± ]·¥∏‚ü® p ‚ü©  ‚àó  [ Œ± ]·¥∏‚ü® q ‚ü©

  []·¥∏‚ü®‚ü©-merge-/2 :  [ Œ± ]·¥∏‚ü® p /2‚Å∫ ‚ü©  ‚àó  [ Œ± ]·¥∏‚ü® p /2‚Å∫ ‚ü©  ‚ä¢[ Œπ ]  [ Œ± ]·¥∏‚ü® p ‚ü©
  []·¥∏‚ü®‚ü©-merge-/2 {p = p} =  []·¥∏‚ü®‚ü©-merge ¬ª []·¥∏‚ü®‚ü©-resp $ /2‚Å∫-merge {p}

  []·¥∏‚ü®‚ü©-split-/2 :  [ Œ± ]·¥∏‚ü® p ‚ü©  ‚ä¢[ Œπ ]  [ Œ± ]·¥∏‚ü® p /2‚Å∫ ‚ü©  ‚àó  [ Œ± ]·¥∏‚ü® p /2‚Å∫ ‚ü©
  []·¥∏‚ü®‚ü©-split-/2 {p = p} =  []·¥∏‚ü®‚ü©-resp (/2‚Å∫-split {p}) ¬ª []·¥∏‚ü®‚ü©-split
