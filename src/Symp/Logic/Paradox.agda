--------------------------------------------------------------------------------
-- Paradoxes on plausible proof rules
--------------------------------------------------------------------------------

{-# OPTIONS --without-K --sized-types #-}

module Symp.Logic.Paradox where

open import Base.Func using (_$_; flip)
open import Base.Eq using (refl)
open import Base.Size using (ùïä; ‚àû; !)
open import Base.Prod using (-,_)
open import Symp.Lang.Expr using (Type; Expr‚àû; loop; Val)
open import Symp.Lang.Ktxred using (Redex)
open import Symp.Lang.Reduce using (_‚áí·¥æ_; red·¥æ)
open import Symp.Logic.Prop using (Name; strnm; Lft; SProp; SPropÀÇ; SProp‚àû;
  SPropÀÇ‚àû; ¬°·¥æ_; ‚àÉ-syntax; _‚àß_; _‚à®_; ‚ä§'; ‚ä•'; ‚ñ°_; _‚àó_; _-‚àó_; [^_]·¥∫; ‚óã_; _‚ä∏[_]‚áõ_;
  _‚ä∏[_]·µÉ‚ü®_‚ü©_; _‚ä∏‚ü®_‚ü©·¥æ_; _‚ä∏‚ü®_‚ü©·µÄ[_]_; _‚ä∏[_]‚ü®_‚ü©‚àû; &‚Å±‚ü®_‚ü©_; ‚Öã‚Å±‚ü®_‚ü©_; [_]·¥∏; ‚Ä†·¥∏_)
open import Symp.Logic.Core using (_‚ä¢[_]_; ‚áí<; ‚ä¢-refl; _¬ª_; ‚àÉ-elim; ‚àÉ-intro;
  ‚àß-intro; ‚àß-elim ≥; ‚à®-introÀ°; ‚à®-intro ≥; ‚ä•-elim; ‚àó-monoÀ°; ‚àó-mono ≥; ‚àó-comm;
  ‚àó-assocÀ°; ‚àó-assoc ≥; ?‚àó-comm; ‚àó-elimÀ°; ‚àó-elim ≥; ‚ä§‚àó-intro; ‚àó‚ä§-intro; ‚àÉ‚àó-elim;
  ‚à®‚àó-elim; ‚àó‚à®-elim; -‚àó-introÀ°; -‚àó-intro ≥; -‚àó-apply ≥; ‚ñ°-mono; ‚ñ°-elim;
  ‚ñ°-intro-Pers; dup-Pers-‚àó)
open import Symp.Logic.Fupd using (_‚ä¢[_][_]‚áõ_; ‚§á‚áí‚áõ; _·µò¬ª·µò_; _·µò¬ª_; ‚áõ-frameÀ°;
  ‚áõ-frame ≥)
open import Symp.Logic.Hor using (_‚ä¢[_][_]·µÉ‚ü®_‚ü©_; _‚ä¢[_]‚ü®_‚ü©·¥æ_; _‚ä¢[_]‚ü®_‚ü©·µÄ[_]_;
  _‚ä¢[_][_]‚ü®_‚ü©‚àû; _·µò¬ª·µÉ ∞_; _·µò¬ª ∞_; _·µò¬ª‚Å± ∞_)
open import Symp.Logic.Ind using (‚óã-mono; ‚ñ°‚óã-new-rec; ‚óã-use; ‚óã‚áí‚ä∏‚áõ; ‚óã‚áí‚ä∏·µÉ‚ü®‚ü©;
  ‚óã‚áí‚ä∏‚ü®‚ü©; ‚óã‚áí‚ä∏‚ü®‚ü©‚àû)
open import Symp.Logic.Inv using (&‚Å±-new; &‚Å±-open; ‚Öã‚Å±-close)
open import Symp.Logic.Lft using ([]·¥∏‚ü®‚ü©-‚Ä†·¥∏-no; []·¥∏-new; []·¥∏-kill)

private variable
  Œπ :  ùïä
  Œ± :  Lft
  X :  Set‚ÇÄ
  T :  Type
  P Q :  SProp‚àû
  PÀÇ QÀÇ :  SPropÀÇ‚àû
  QÀô :  X ‚Üí  SProp‚àû
  QÀÇÀô :  X ‚Üí  SPropÀÇ‚àû

--------------------------------------------------------------------------------
-- If we have a negation connective ¬¨·∂ú that is coinductive, then we can
-- construct the liar proposition and prove contradiction---the liar paradox

module _ (¬¨·∂ú_ : ‚àÄ{Œπ} ‚Üí SPropÀÇ Œπ ‚Üí SProp Œπ)
  (¬¨·∂ú-intro ≥ : ‚àÄ{P QÀÇ Œπ} ‚Üí  P ‚àß QÀÇ .! ‚ä¢[ Œπ ] ‚ä•' ‚Üí  P ‚ä¢[ Œπ ] ¬¨·∂ú QÀÇ)
  (¬¨·∂ú-elim ≥ : ‚àÄ{P QÀÇ Œπ} ‚Üí  P ‚ä¢[ Œπ ] ¬¨·∂ú QÀÇ ‚Üí  P ‚àß QÀÇ .! ‚ä¢[ Œπ ] ‚ä•') where

  -- The liar proposition

  Liar/¬¨·∂ú :  SProp Œπ
  Liar/¬¨·∂ú =  ¬¨·∂ú Œª{ .! ‚Üí Liar/¬¨·∂ú }

  -- Liar yields ‚ä•

  Liar‚áí‚ä•/¬¨·∂ú :  Liar/¬¨·∂ú ‚ä¢[ Œπ ] ‚ä•'
  Liar‚áí‚ä•/¬¨·∂ú =  ‚àß-intro ‚ä¢-refl ‚ä¢-refl ¬ª ¬¨·∂ú-elim ≥ ‚ä¢-refl

  -- Get Liar

  ‚áíLiar/¬¨·∂ú :  ‚ä§' ‚ä¢[ Œπ ] Liar/¬¨·∂ú
  ‚áíLiar/¬¨·∂ú =  ¬¨·∂ú-intro ≥ $ ‚àß-elim ≥ ¬ª Liar‚áí‚ä•/¬¨·∂ú

  -- Get ‚ä•

  ‚áí‚ä•/¬¨·∂ú :  ‚ä§' ‚ä¢[ Œπ ] ‚ä•'
  ‚áí‚ä•/¬¨·∂ú =  ‚áíLiar/¬¨·∂ú ¬ª Liar‚áí‚ä•/¬¨·∂ú

--------------------------------------------------------------------------------
-- If we have the fancy update as a modality ‚áõ·µê, then we have a paradox, because
-- we can construct something like Landin's knot using our later-less
-- impredicative invariant and the two-state protocol (here we repurpose the
-- lifetime and dead lifetime tokens)

-- Our construction is based on Iris's paradox of the "naive impredicative
-- invariant" (Jung et al. "Iris from the Ground Up" JFP 2018) but does not
-- depend on quantification over propositions, not supported by our logic
-- This is much simpler than Iris's original construction

module _ {nm : Name} (‚áõ·µê : SProp‚àû ‚Üí SProp‚àû)
  (‚áõ·µê-intro :  ‚àÄ{P Q} ‚Üí  P ‚ä¢[ ‚àû ][ 0 ]‚áõ Q ‚Üí  P ‚ä¢[ ‚àû ] ‚áõ·µê Q)
  (‚áõ·µê-elim :  ‚àÄ{P Q} ‚Üí  P ‚ä¢[ ‚àû ] ‚áõ·µê Q ‚Üí  P ‚ä¢[ ‚àû ][ 0 ]‚áõ Q)
  where abstract

  -- ‚ñ°‚áõ‚ä• :  Persistent proposition for getting ‚ä•' after update with [^ nm ]·¥∫

  ‚ñ°‚áõ‚ä•/‚áõ·µê :  SProp‚àû
  ‚ñ°‚áõ‚ä•/‚áõ·µê =  ‚ñ° ([^ nm ]·¥∫ -‚àó ‚áõ·µê ‚ä•')

  -- Evil :  The evil impredicative invariant

  Evil/‚áõ·µê :  Lft ‚Üí SProp‚àû
  Evil/‚áõ·µê Œ± =  &‚Å±‚ü® nm ‚ü© ¬°·¥æ ([ Œ± ]·¥∏ ‚à® ‚ñ°‚áõ‚ä•/‚áõ·µê)

  -- We get contradiction consuming ‚ñ°‚áõ‚ä• and ‚Öã‚Å±‚ü® nm ‚ü© ¬°·¥æ ([ Œ± ]·¥∏ ‚à® ‚ñ°‚áõ‚ä•/‚áõ·µê)

  ‚ñ°‚áõ‚ä•-‚Öã‚Å±-no/‚áõ·µê :  ‚ñ°‚áõ‚ä•/‚áõ·µê  ‚àó  ‚Öã‚Å±‚ü® nm ‚ü© ¬°·¥æ ([ Œ± ]·¥∏ ‚à® ‚ñ°‚áõ‚ä•/‚áõ·µê)  ‚ä¢[ ‚àû ][ 0 ]‚áõ  ‚ä•'
  ‚ñ°‚áõ‚ä•-‚Öã‚Å±-no/‚áõ·µê =  dup-Pers-‚àó ¬ª ‚áõ-frame ≥ (‚àó-monoÀ° ‚à®-intro ≥ ¬ª ‚Öã‚Å±-close) ·µò¬ª·µò
    ‚àó-monoÀ° ‚ñ°-elim ¬ª -‚àó-apply ≥ ¬ª ‚áõ·µê-elim ‚ä¢-refl

  -- Create Evil

  Evil-intro/‚áõ·µê :  ‚ä§'  ‚ä¢[ ‚àû ][ 0 ]‚áõ  ‚àÉ Œ± , Evil/‚áõ·µê Œ±
  Evil-intro/‚áõ·µê =  []·¥∏-new ¬ª ‚§á‚áí‚áõ ·µò¬ª·µò ‚àÉ-elim Œª Œ± ‚Üí ‚à®-introÀ° ¬ª &‚Å±-new ·µò¬ª ‚àÉ-intro Œ±

  -- We get contradiction out of ‚Ä†·¥∏ Œ± and Evil Œ± with [^ nm ]·¥∫,
  -- because ‚Ä†·¥∏ Œ± eliminates the possibility of [ Œ± ]·¥∏ when we open Evil Œ±

  ‚Ä†·¥∏-Evil-no/‚áõ·µê :  ‚Ä†·¥∏ Œ±  ‚àó  Evil/‚áõ·µê Œ±  ‚àó  [^ nm ]·¥∫  ‚ä¢[ ‚àû ][ 0 ]‚áõ  ‚ä•'
  ‚Ä†·¥∏-Evil-no/‚áõ·µê =  ‚áõ-frame ≥ &‚Å±-open ·µò¬ª·µò ‚àó-assocÀ° ¬ª
    ‚àó-monoÀ° (‚àó‚à®-elim (‚àó-comm ¬ª []·¥∏‚ü®‚ü©-‚Ä†·¥∏-no ¬ª ‚ä•-elim) ‚àó-elim ≥) ¬ª ‚ñ°‚áõ‚ä•-‚Öã‚Å±-no/‚áõ·µê

  -- So ‚Ä†·¥∏ Œ± and Evil Œ± turns into ‚ñ°‚áõ‚ä•/‚áõ·µê

  ‚Ä†·¥∏-Evil-‚ñ°‚áõ‚ä•/‚áõ·µê :  ‚Ä†·¥∏ Œ±  ‚àó  Evil/‚áõ·µê Œ±  ‚ä¢[ ‚àû ]  ‚ñ°‚áõ‚ä•/‚áõ·µê
  ‚Ä†·¥∏-Evil-‚ñ°‚áõ‚ä•/‚áõ·µê =  ‚ñ°-intro-Pers $
    -‚àó-intro ≥ $ ‚áõ·µê-intro $ ‚àó-assoc ≥ ¬ª ‚Ä†·¥∏-Evil-no/‚áõ·µê

  -- We get contradiction out of Evil Œ± with [^ nm ]·¥∫
  -- When we open Evil Œ±, in the case the content is [ Œ± ]·¥∏, we can kill it to
  -- get ‚Ä†·¥∏ Œ±; this allows us to close the invariant (by ‚Ä†·¥∏-Evil-‚ñ°‚áõ‚ä•/‚áõ·µê), and
  -- the retrieved name token allows us to get ‚ä•' (by ‚Ä†·¥∏-Evil-no/‚áõ·µê)

  Evil-no/‚áõ·µê :  Evil/‚áõ·µê Œ±  ‚àó  [^ nm ]·¥∫  ‚ä¢[ ‚àû ][ 0 ]‚áõ  ‚ä•'
  Evil-no/‚áõ·µê =  dup-Pers-‚àó ¬ª ‚áõ-frame ≥ &‚Å±-open ·µò¬ª·µò ?‚àó-comm ¬ª
    flip ‚à®‚àó-elim (‚àó-mono ≥ ‚àó-elim ≥ ¬ª ‚ñ°‚áõ‚ä•-‚Öã‚Å±-no/‚áõ·µê) $
    ‚áõ-frameÀ° ([]·¥∏-kill ¬ª ‚§á‚áí‚áõ) ·µò¬ª·µò ‚àó-assocÀ° ¬ª dup-Pers-‚àó ¬ª
    ‚áõ-frame ≥ (‚àó-monoÀ° (‚Ä†·¥∏-Evil-‚ñ°‚áõ‚ä•/‚áõ·µê ¬ª ‚à®-intro ≥) ¬ª ‚Öã‚Å±-close) ·µò¬ª·µò
    ‚àó-assoc ≥ ¬ª ‚Ä†·¥∏-Evil-no/‚áõ·µê

  -- Therefore, combining Evil-intro/‚áõ·µê and Evil-no/‚áõ·µê, we get contradiction out
  -- of [^ nm ]·¥∫, which is a paradox!

  [^nm]·¥∫-no/‚áõ·µê :  [^ nm ]·¥∫  ‚ä¢[ ‚àû ][ 0 ]‚áõ  ‚ä•'
  [^nm]·¥∫-no/‚áõ·µê =  ‚ä§‚àó-intro ¬ª
    ‚áõ-frameÀ° Evil-intro/‚áõ·µê ·µò¬ª·µò ‚àÉ‚àó-elim Œª _ ‚Üí Evil-no/‚áõ·µê

--------------------------------------------------------------------------------
-- If we have existential quantification over SProp‚àû as well as lifting of
-- the fancy update sequent, then we have the paradox observed above,
-- because then we can encode the fancy update modality ‚áõ·µê

-- Lifting of the fancy update sequent would be readily available if we worked
-- on a meta-logic that has the impredicative universe Prop (like Coq)

module _ {nm : Name} (‚àÉ·¥æÀô :  (SProp‚àû ‚Üí SProp‚àû) ‚Üí  SProp‚àû)
  (‚àÉ·¥æ-elim :  ‚àÄ{PÀô Q} ‚Üí  (‚àÄ R ‚Üí  PÀô R ‚ä¢[ ‚àû ][ 0 ]‚áõ Q) ‚Üí  ‚àÉ·¥æÀô PÀô ‚ä¢[ ‚àû ][ 0 ]‚áõ Q)
  (‚àÉ·¥æ-intro :  ‚àÄ{PÀô} R ‚Üí  PÀô R ‚ä¢[ ‚àû ] ‚àÉ·¥æÀô PÀô)
  (‚åú_‚ä¢‚áõ_‚åù‚àß_ :  SProp‚àû ‚Üí  SProp‚àû ‚Üí  SProp‚àû ‚Üí  SProp‚àû)
  (‚ä¢‚áõ‚àß-elim :  ‚àÄ{P Q R S} ‚Üí  (P ‚ä¢[ ‚àû ][ 0 ]‚áõ Q ‚Üí  R ‚ä¢[ ‚àû ][ 0 ]‚áõ S) ‚Üí
                             ‚åú P ‚ä¢‚áõ Q ‚åù‚àß R ‚ä¢[ ‚àû ][ 0 ]‚áõ S)
  (‚ä¢‚áõ‚àß-intro :  ‚àÄ{P Q R} ‚Üí  P ‚ä¢[ ‚àû ][ 0 ]‚áõ Q ‚Üí  R ‚ä¢[ ‚àû ] ‚åú P ‚ä¢‚áõ Q ‚åù‚àß R)
  where abstract

  -- We can encode the fancy update modality ‚áõ·µê

  ‚áõ·µê/‚àÉ·¥æ :  SProp‚àû ‚Üí  SProp‚àû
  ‚áõ·µê/‚àÉ·¥æ P =  ‚àÉ·¥æÀô Œª Q ‚Üí  ‚åú Q ‚ä¢‚áõ P ‚åù‚àß  Q

  ‚áõ·µê-intro/‚àÉ·¥æ :  P ‚ä¢[ ‚àû ][ 0 ]‚áõ Q ‚Üí  P ‚ä¢[ ‚àû ] ‚áõ·µê/‚àÉ·¥æ Q
  ‚áõ·µê-intro/‚àÉ·¥æ P‚ä¢‚áõQ =  ‚ä¢‚áõ‚àß-intro P‚ä¢‚áõQ ¬ª ‚àÉ·¥æ-intro _

  ‚áõ·µê-elim/‚àÉ·¥æ :  P ‚ä¢[ ‚àû ] ‚áõ·µê/‚àÉ·¥æ Q ‚Üí  P ‚ä¢[ ‚àû ][ 0 ]‚áõ Q
  ‚áõ·µê-elim/‚àÉ·¥æ P‚ä¢‚áõ·µêQ =  P‚ä¢‚áõ·µêQ ¬ª ‚àÉ·¥æ-elim Œª R ‚Üí ‚ä¢‚áõ‚àß-elim Œª R‚ä¢‚áõQ ‚Üí R‚ä¢‚áõQ

  -- Therefore, by [^nm]·¥∫-no/‚áõ·µê, we get contradiction out of [^ nm ]·¥∫,
  -- which is a paradox!

  [^nm]·¥∫-no/‚àÉ·¥æ :  [^ nm ]·¥∫  ‚ä¢[ ‚àû ][ 0 ]‚áõ  ‚ä•'
  [^nm]·¥∫-no/‚àÉ·¥æ =  [^nm]·¥∫-no/‚áõ·µê ‚áõ·µê/‚àÉ·¥æ ‚áõ·µê-intro/‚àÉ·¥æ ‚áõ·µê-elim/‚àÉ·¥æ

--------------------------------------------------------------------------------
-- If we can turn ‚óã P into P, then we get P after a fancy update,
-- thanks to ‚ñ°‚óã-new-rec

‚óã-rec :  ‚óã ¬°·¥æ P ‚ä¢[ ‚àû ] P ‚Üí  ‚ä§' ‚ä¢[ ‚àû ][ 0 ]‚áõ P
‚óã-rec ‚óãP‚ä¢P =  -‚àó-introÀ° (‚àó-elimÀ° ¬ª ‚ñ°-mono ‚óãP‚ä¢P) ¬ª ‚ñ°‚óã-new-rec ·µò¬ª·µò ‚ñ°-elim ¬ª ‚óã-use

--------------------------------------------------------------------------------
-- If we can use ‚ä∏‚áõ without level increment, then we get a paradox

module _
  -- ‚ä∏‚áõ-use without level increment
  (‚ä∏‚áõ-use' :  ‚àÄ{PÀÇ QÀÇ} ‚Üí  PÀÇ .!  ‚àó  (PÀÇ ‚ä∏[ 0 ]‚áõ QÀÇ)  ‚ä¢[ ‚àû ][ 0 ]‚áõ  QÀÇ .!)
  where abstract

  -- We can strip ‚óã from ‚ä∏‚áõ, using ‚ä∏‚áõ-use'

  ‚óã‚áí-‚ä∏‚áõ/‚ä∏‚áõ-use' :  ‚óã ¬°·¥æ (PÀÇ ‚ä∏[ 0 ]‚áõ QÀÇ)  ‚ä¢[ ‚àû ]  PÀÇ ‚ä∏[ 0 ]‚áõ QÀÇ
  ‚óã‚áí-‚ä∏‚áõ/‚ä∏‚áõ-use' =  ‚óã‚áí‚ä∏‚áõ $ ‚áí< ‚ä∏‚áõ-use'

  -- Therefore, by ‚óã-rec, we can do any fancy update --- a paradox!

  ‚áõ/‚ä∏‚áõ-use' :  P  ‚ä¢[ ‚àû ][ 0 ]‚áõ  Q
  ‚áõ/‚ä∏‚áõ-use' =  ‚àó‚ä§-intro ¬ª
    ‚áõ-frame ≥ (‚óã-rec ‚óã‚áí-‚ä∏‚áõ/‚ä∏‚áõ-use') ·µò¬ª·µò ‚ä∏‚áõ-use' {¬°·¥æ _} {¬°·¥æ _}

--------------------------------------------------------------------------------
-- If we can use ‚ä∏·µÉ‚ü® ‚ü© without level increment, then we get a paradox

module _ {red : Redex T}
  -- ‚ä∏·µÉ‚ü®‚ü©-use without level increment
  (‚ä∏·µÉ‚ü®‚ü©-use' :  ‚àÄ{PÀÇ QÀÇÀô} ‚Üí
    PÀÇ .!  ‚àó  (PÀÇ ‚ä∏[ 0 ]·µÉ‚ü® red ‚ü© QÀÇÀô)  ‚ä¢[ ‚àû ][ 0 ]·µÉ‚ü® red ‚ü© Œª v ‚Üí  QÀÇÀô v .!)
  where abstract

  -- We can strip ‚óã from ‚ä∏·µÉ‚ü®‚ü©, using ‚ä∏·µÉ‚ü®‚ü©-use'

  ‚óã‚áí-‚ä∏·µÉ‚ü®‚ü©/‚ä∏·µÉ‚ü®‚ü©-use' :
    ‚óã ¬°·¥æ (PÀÇ ‚ä∏[ 0 ]·µÉ‚ü® red ‚ü© QÀÇÀô)  ‚ä¢[ ‚àû ]  PÀÇ ‚ä∏[ 0 ]·µÉ‚ü® red ‚ü© QÀÇÀô
  ‚óã‚áí-‚ä∏·µÉ‚ü®‚ü©/‚ä∏·µÉ‚ü®‚ü©-use' =  ‚óã‚áí‚ä∏·µÉ‚ü®‚ü© $ ‚áí< ‚ä∏·µÉ‚ü®‚ü©-use'

  -- Therefore, by ‚óã-rec, we have any total Hoare triple --- a paradox!

  ahor/‚ä∏·µÉ‚ü®‚ü©-use' :  P  ‚ä¢[ ‚àû ][ 0 ]·µÉ‚ü® red ‚ü©  QÀô
  ahor/‚ä∏·µÉ‚ü®‚ü©-use' =  ‚àó‚ä§-intro ¬ª ‚áõ-frame ≥ (‚óã-rec ‚óã‚áí-‚ä∏·µÉ‚ü®‚ü©/‚ä∏·µÉ‚ü®‚ü©-use') ·µò¬ª·µÉ ∞
    ‚ä∏·µÉ‚ü®‚ü©-use' {PÀÇ = ¬°·¥æ _} {Œª v ‚Üí ¬°·¥æ _}

--------------------------------------------------------------------------------
-- If we can use ‚ä∏‚ü® ‚ü©·¥æ without pure reduction, then we get a paradox

module _ {e : Expr‚àû T}
  -- ‚ä∏‚ü®‚ü©·¥æ-use without pure reduction
  (‚ä∏‚ü®‚ü©·¥æ-use' :  ‚àÄ{PÀÇ QÀÇÀô} ‚Üí
    PÀÇ .!  ‚àó  (PÀÇ ‚ä∏‚ü® e ‚ü©·¥æ QÀÇÀô)  ‚ä¢[ ‚àû ]‚ü® e ‚ü©·¥æ Œª v ‚Üí  QÀÇÀô v .!)
  where abstract

  -- We can strip ‚óã from ‚ä∏‚ü®‚ü©·¥æ, using ‚ä∏‚ü®‚ü©·¥æ-use'

  ‚óã‚áí-‚ä∏‚ü®‚ü©·¥æ/‚ä∏‚ü®‚ü©·¥æ-use' :  ‚óã ¬°·¥æ (PÀÇ ‚ä∏‚ü® e ‚ü©·¥æ QÀÇÀô)  ‚ä¢[ ‚àû ]  PÀÇ ‚ä∏‚ü® e ‚ü©·¥æ QÀÇÀô
  ‚óã‚áí-‚ä∏‚ü®‚ü©·¥æ/‚ä∏‚ü®‚ü©·¥æ-use' =  ‚óã‚áí‚ä∏‚ü®‚ü© $ ‚áí< ‚ä∏‚ü®‚ü©·¥æ-use'

  -- Therefore, by ‚óã-rec, we have any partial Hoare triple --- a paradox!

  hor·¥æ/‚ä∏‚ü®‚ü©·¥æ-use' :  P  ‚ä¢[ ‚àû ]‚ü® e ‚ü©·¥æ  QÀô
  hor·¥æ/‚ä∏‚ü®‚ü©·¥æ-use' =  ‚àó‚ä§-intro ¬ª ‚áõ-frame ≥ (‚óã-rec ‚óã‚áí-‚ä∏‚ü®‚ü©·¥æ/‚ä∏‚ü®‚ü©·¥æ-use') ·µò¬ª ∞
    ‚ä∏‚ü®‚ü©·¥æ-use' {PÀÇ = ¬°·¥æ _} {Œª _ ‚Üí ¬°·¥æ _}

--------------------------------------------------------------------------------
-- If we can use ‚ä∏‚ü® ‚ü©·µÄ without level increment, then we get a paradox

module _ {e : Expr‚àû T}
  -- ‚ä∏‚ü®‚ü©·µÄ-use without level increment
  (‚ä∏‚ü®‚ü©·µÄ-use' :  ‚àÄ{PÀÇ QÀÇÀô} ‚Üí
    PÀÇ .!  ‚àó  (PÀÇ ‚ä∏‚ü® e ‚ü©·µÄ[ 0 ] QÀÇÀô)  ‚ä¢[ ‚àû ]‚ü® e ‚ü©·µÄ[ 0 ] Œª v ‚Üí  QÀÇÀô v .!)
  where abstract

  -- We can strip ‚óã from ‚ä∏‚ü®‚ü©·µÄ, using ‚ä∏‚ü®‚ü©·µÄ-use'

  ‚óã‚áí-‚ä∏‚ü®‚ü©·µÄ/‚ä∏‚ü®‚ü©·µÄ-use' :  ‚óã ¬°·¥æ (PÀÇ ‚ä∏‚ü® e ‚ü©·µÄ[ 0 ] QÀÇÀô)  ‚ä¢[ ‚àû ]  PÀÇ ‚ä∏‚ü® e ‚ü©·µÄ[ 0 ] QÀÇÀô
  ‚óã‚áí-‚ä∏‚ü®‚ü©·µÄ/‚ä∏‚ü®‚ü©·µÄ-use' =  ‚óã‚áí‚ä∏‚ü®‚ü© $ ‚áí< ‚ä∏‚ü®‚ü©·µÄ-use'

  -- Therefore, by ‚óã-rec, we have any total Hoare triple --- a paradox!

  hor·µÄ/‚ä∏‚ü®‚ü©·µÄ-use' :  P  ‚ä¢[ ‚àû ]‚ü® e ‚ü©·µÄ[ 0 ]  QÀô
  hor·µÄ/‚ä∏‚ü®‚ü©·µÄ-use' =  ‚àó‚ä§-intro ¬ª ‚áõ-frame ≥ (‚óã-rec ‚óã‚áí-‚ä∏‚ü®‚ü©·µÄ/‚ä∏‚ü®‚ü©·µÄ-use') ·µò¬ª ∞
    ‚ä∏‚ü®‚ü©·µÄ-use' {PÀÇ = ¬°·¥æ _} {Œª _ ‚Üí ¬°·¥æ _}

--------------------------------------------------------------------------------
-- If we can use ‚ä∏‚ü® ‚ü©·µÄ with pure reduction, not level increment,
-- then we get a paradox

module _
  -- ‚ä∏‚ü®‚ü©·µÄ-use with pure reduction, not level increment
  (‚ä∏‚ü®‚ü©·µÄ-use‚áí·¥æ :  ‚àÄ{e e' : Expr‚àû T} {PÀÇ QÀÇÀô} ‚Üí  e ‚áí·¥æ e' ‚Üí
    PÀÇ .!  ‚àó  (PÀÇ ‚ä∏‚ü® e' ‚ü©·µÄ[ 0 ] QÀÇÀô)  ‚ä¢[ ‚àû ]‚ü® e ‚ü©·µÄ[ 0 ] Œª v ‚Üí  QÀÇÀô v .!)
  where abstract

  -- We can strip ‚óã from ‚ä∏‚ü® loop ‚ü©·µÄ, using ‚ä∏‚ü®‚ü©·µÄ-use

  ‚óã‚áí-‚ä∏‚ü®loop‚ü©·µÄ/‚ä∏‚ü®‚ü©·µÄ-use‚áí·¥æ :  ‚óã ¬°·¥æ (PÀÇ ‚ä∏‚ü® loop {T = T} ‚ü©·µÄ[ 0 ] QÀÇÀô)  ‚ä¢[ ‚àû ]
                              PÀÇ ‚ä∏‚ü® loop {T = T} ‚ü©·µÄ[ 0 ] QÀÇÀô
  ‚óã‚áí-‚ä∏‚ü®loop‚ü©·µÄ/‚ä∏‚ü®‚ü©·µÄ-use‚áí·¥æ =  ‚óã‚áí‚ä∏‚ü®‚ü© $ ‚áí< $ ‚ä∏‚ü®‚ü©·µÄ-use‚áí·¥æ {loop} (-, red·¥æ refl)

  -- Therefore, by ‚óã-rec, we have any total Hoare triple for the expression
  -- loop, which is a paradox: Although the total Hoare triple should ensure
  -- termination, loop does not terminate!

  hor·µÄ-loop/‚ä∏‚ü®‚ü©·µÄ-use‚áí·¥æ :  P  ‚ä¢[ ‚àû ]‚ü® loop {T = T} ‚ü©·µÄ[ 0 ]  QÀô
  hor·µÄ-loop/‚ä∏‚ü®‚ü©·µÄ-use‚áí·¥æ =  ‚àó‚ä§-intro ¬ª
    ‚áõ-frame ≥ (‚óã-rec ‚óã‚áí-‚ä∏‚ü®loop‚ü©·µÄ/‚ä∏‚ü®‚ü©·µÄ-use‚áí·¥æ) ·µò¬ª ∞
    ‚ä∏‚ü®‚ü©·µÄ-use‚áí·¥æ {loop} {PÀÇ = ¬°·¥æ _} {Œª _ ‚Üí ¬°·¥æ _} (-, red·¥æ refl)

--------------------------------------------------------------------------------
-- If we can use ‚ä∏‚ü® ‚ü©‚àû without level increment, then we get a paradox

module _ {e : Expr‚àû T}
  -- ‚ä∏‚ü®‚ü©‚àû-use without level increment
  (‚ä∏‚ü®‚ü©‚àû-use' :  ‚àÄ{PÀÇ} ‚Üí  PÀÇ .!  ‚àó  (PÀÇ ‚ä∏[ 0 ]‚ü® e ‚ü©‚àû)  ‚ä¢[ ‚àû ][ 0 ]‚ü® e ‚ü©‚àû)
  where abstract

  -- We can strip ‚óã from ‚ä∏‚ü®‚ü©‚àû, using ‚ä∏‚ü®‚ü©‚àû-use'

  ‚óã‚áí-‚ä∏‚ü®‚ü©‚àû/‚ä∏‚ü®‚ü©‚àû-use' :  ‚óã ¬°·¥æ (PÀÇ ‚ä∏[ 0 ]‚ü® e ‚ü©‚àû)  ‚ä¢[ ‚àû ]  PÀÇ ‚ä∏[ 0 ]‚ü® e ‚ü©‚àû
  ‚óã‚áí-‚ä∏‚ü®‚ü©‚àû/‚ä∏‚ü®‚ü©‚àû-use' =  ‚óã‚áí‚ä∏‚ü®‚ü©‚àû $ ‚áí< ‚ä∏‚ü®‚ü©‚àû-use'

  -- Therefore, by ‚óã-rec, we have any total Hoare triple --- a paradox!

  ihor/‚ä∏‚ü®‚ü©‚àû-use' :  P  ‚ä¢[ ‚àû ][ 0 ]‚ü® e ‚ü©‚àû
  ihor/‚ä∏‚ü®‚ü©‚àû-use' =  ‚àó‚ä§-intro ¬ª
    ‚áõ-frame ≥ (‚óã-rec ‚óã‚áí-‚ä∏‚ü®‚ü©‚àû/‚ä∏‚ü®‚ü©‚àû-use') ·µò¬ª‚Å± ∞ ‚ä∏‚ü®‚ü©‚àû-use' {PÀÇ = ¬°·¥æ _}
