--------------------------------------------------------------------------------
-- Borrow ERA
--------------------------------------------------------------------------------

{-# OPTIONS --without-K --sized-types #-}

module Syho.Model.ERA.Bor where

open import Base.Level using (1·¥∏)
open import Base.Func using (_$_)
open import Base.Few using (‚ä§‚ÇÄ)
open import Base.Eq using (_‚â°_; refl)
open import Base.Dec using (updÀô)
open import Base.Bool using (ùîπ; tt; ff)
open import Base.Option using (¬ø_; ≈°_; ≈à; ¬ø-case)
open import Base.Prod using (_√ó_; _,_; _,-)
open import Base.Nat using (‚Ñï; ·π°_; _<_)
open import Base.Ratp using (‚Ñö‚Å∫)
open import Syho.Logic.Prop using (Lft; Prop‚àû)
open import Syho.Model.ERA.Base using (ERA; _√ó·¥±·¥ø·¥¨_; Envm·¥±·¥ø·¥¨)
open import Syho.Model.ERA.Exc using (Exc·¥±·¥ø·¥¨; ŒµÀ£; #À£_; ≈à-‚úìÀ£; ‚úìÀ£-free)
import Syho.Model.ERA.Bnd

--------------------------------------------------------------------------------
-- Bor·¥±·¥ø·¥¨ :  Borrow ERA

-- Borb·¥±·¥ø·¥¨ :  Borrow box ERA

Borb·¥±·¥ø·¥¨ :  ERA 1·¥∏ 1·¥∏ 1·¥∏ 1·¥∏
Borb·¥±·¥ø·¥¨ =  Envm·¥±·¥ø·¥¨ (Exc·¥±·¥ø·¥¨ (¬ø ‚Ñö‚Å∫ √ó Lft √ó Prop‚àû) √ó·¥±·¥ø·¥¨ Exc·¥±·¥ø·¥¨ (ùîπ √ó Lft √ó Prop‚àû))
  (¬ø (¬ø ‚Ñö‚Å∫ √ó ùîπ √ó Lft √ó Prop‚àû))
  (¬ø-case (Œª (pÀá , b , Œ± , P) ‚Üí ≈° (pÀá , Œ± , P) , ≈° (b , Œ± , P)) (≈à , ≈à))

-- Bor·¥±·¥ø·¥¨ :  Borrow ERA

module BndBor =  Syho.Model.ERA.Bnd Borb·¥±·¥ø·¥¨ ≈à
  (Œª (≈à‚úìx , ≈à‚úìy) ‚Üí ≈à-‚úìÀ£ ≈à‚úìx , ≈à-‚úìÀ£ ≈à‚úìy)
open BndBor public using () renaming (
  --  Bor·¥±·¥ø·¥¨ :  ERA 1·¥∏ 1·¥∏ 1·¥∏ 1·¥∏
  Bnd·¥±·¥ø·¥¨ to Bor·¥±·¥ø·¥¨;
  injÀô to injÀô·¥Æ·µí ≥; injÀô-‚àô to injÀô·¥Æ·µí ≥-‚àô;
  ‚Üù·¥Æ‚Åø·µà-new to ‚Üù·¥Æ·µí ≥-new)

open ERA Borb·¥±·¥ø·¥¨ public using () renaming (Env to Env·¥Æ·µí ≥·µá)
open ERA Bor·¥±·¥ø·¥¨ public using () renaming (Res to Res·¥Æ·µí ≥; _‚àô_ to _‚àô·¥Æ·µí ≥_;
  Œµ to Œµ·¥Æ·µí ≥; Env to Env·¥Æ·µí ≥; _‚úì_ to _‚úì·¥Æ·µí ≥_; _‚Üù_ to _‚Üù·¥Æ‚Åø·µà_; ‚ó†Àú_ to ‚ó†Àú·¥Æ·µí ≥_;
  ‚Üù-resp ≥ to ‚Üù·¥Æ·µí ≥-resp ≥)

-- Resource for the borrow token

bor :  ‚Ñï ‚Üí  Lft ‚Üí  Prop‚àû ‚Üí  Res·¥Æ·µí ≥
bor i Œ± P =  injÀô·¥Æ·µí ≥ i (#À£ (≈à , Œ± , P) , ŒµÀ£)

-- Resource for the open borrow token

obor :  ‚Ñï ‚Üí  Lft ‚Üí  ‚Ñö‚Å∫ ‚Üí  Prop‚àû ‚Üí  Res·¥Æ·µí ≥
obor i Œ± p P =  injÀô·¥Æ·µí ≥ i (#À£ (≈° p , Œ± , P) , ŒµÀ£)

-- Resource for the lender token

lend :  ‚Ñï ‚Üí  Lft ‚Üí  Prop‚àû ‚Üí  Res·¥Æ·µí ≥
lend i Œ± P =  injÀô·¥Æ·µí ≥ i (ŒµÀ£ , #À£ (tt , Œ± , P))

-- Resource for a finished lender

flend :  ‚Ñï ‚Üí  Lft ‚Üí  Prop‚àû ‚Üí  Res·¥Æ·µí ≥
flend i Œ± P =  injÀô·¥Æ·µí ≥ i (ŒµÀ£ , #À£ (ff , Œ± , P))

private variable
  EÀô :  ‚Ñï ‚Üí Env·¥Æ·µí ≥·µá
  n :  ‚Ñï
  Œ± :  Lft
  P :  Prop‚àû

abstract

  -- Empty environment for Bor·¥±·¥ø·¥¨

  emp·¥Æ·µí ≥ :  Env·¥Æ·µí ≥
  emp·¥Æ·µí ≥ =  (Œª _ ‚Üí ≈à) , 0

  -- emp·¥Æ·µí ≥ with Œµ·¥Æ·µí ≥ is valid

  emp·¥Æ·µí ≥-‚úìŒµ :  emp·¥Æ·µí ≥ ‚úì·¥Æ·µí ≥ Œµ·¥Æ·µí ≥
  emp·¥Æ·µí ≥-‚úìŒµ =  (Œª _ _ ‚Üí refl) ,-

  -- Create bor and lend at a fresh new index

  bor-lend-new :  ((EÀô , n) , Œµ·¥Æ·µí ≥)  ‚Üù·¥Æ‚Åø·µà Œª (_ : ‚ä§‚ÇÄ) ‚Üí
    (updÀô n (≈° (≈à , tt , Œ± , P)) EÀô , ·π° n) , bor n Œ± P ‚àô·¥Æ·µí ≥ lend n Œ± P
  bor-lend-new =
    ‚Üù·¥Æ·µí ≥-resp ≥ {a = Œµ·¥Æ·µí ≥} (‚ó†Àú·¥Æ·µí ≥ injÀô·¥Æ·µí ≥-‚àô) $ ‚Üù·¥Æ·µí ≥-new (refl , refl)
