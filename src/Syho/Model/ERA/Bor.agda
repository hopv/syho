--------------------------------------------------------------------------------
-- Borrow ERA
--------------------------------------------------------------------------------

{-# OPTIONS --without-K --sized-types #-}

module Syho.Model.ERA.Bor where

open import Base.Level using (1·¥∏)
open import Base.Func using (_$_)
open import Base.Few using (‚ä§‚ÇÄ)
open import Base.Eq using (_‚â°_; refl)
open import Base.Dec using (updÀô)
open import Base.Bool using (ùîπ; tt; ff)
open import Base.Option using (¬ø_; ≈°_; ≈à)
open import Base.Prod using (‚àë-syntax; _√ó_; _,_; -,_; _,-)
open import Base.Nat using (‚Ñï; ·π°_; _<_)
open import Base.Ratp using (‚Ñö‚Å∫)
open import Syho.Logic.Prop using (Lft; Prop‚àû)
open import Syho.Model.ERA.Base using (ERA; _√ó·¥±·¥ø·¥¨_; Envm·¥±·¥ø·¥¨)
open import Syho.Model.ERA.Exc using (Exc·¥±·¥ø·¥¨; ŒµÀ£; #À£_; ≈à-‚úìÀ£)
import Syho.Model.ERA.Bnd

--------------------------------------------------------------------------------
-- Bor·¥±·¥ø·¥¨ :  Borrow ERA

-- Borb·¥±·¥ø·¥¨ :  Borrow box ERA

Env·¥Æ·µí ≥·µá :  Set‚ÇÅ
Env·¥Æ·µí ≥·µá =  ¬ø (¬ø ‚Ñö‚Å∫ √ó ùîπ √ó Lft √ó Prop‚àû)

lenv·¥Æ·µí ≥·µá :  Env·¥Æ·µí ≥·µá ‚Üí  ¬ø (¬ø ‚Ñö‚Å∫ √ó Lft √ó Prop‚àû)
lenv·¥Æ·µí ≥·µá (≈° (pÀá , b , Œ± , P)) =  ≈° (pÀá , Œ± , P)
lenv·¥Æ·µí ≥·µá ≈à =  ≈à

renv·¥Æ·µí ≥·µá :  Env·¥Æ·µí ≥·µá ‚Üí  ¬ø (ùîπ √ó Lft √ó Prop‚àû)
renv·¥Æ·µí ≥·µá (≈° (pÀá , b , Œ± , P)) =  ≈° (b , Œ± , P)
renv·¥Æ·µí ≥·µá ≈à =  ≈à

Borb·¥±·¥ø·¥¨ :  ERA 1·¥∏ 1·¥∏ 1·¥∏ 1·¥∏
Borb·¥±·¥ø·¥¨ =  Envm·¥±·¥ø·¥¨ (Exc·¥±·¥ø·¥¨ (¬ø ‚Ñö‚Å∫ √ó Lft √ó Prop‚àû) √ó·¥±·¥ø·¥¨ Exc·¥±·¥ø·¥¨ (ùîπ √ó Lft √ó Prop‚àû))
  Env·¥Æ·µí ≥·µá Œª E ‚Üí lenv·¥Æ·µí ≥·µá E , renv·¥Æ·µí ≥·µá E

private variable
  E :  Env·¥Æ·µí ≥·µá
  pÀá qÀá :  ¬ø ‚Ñö‚Å∫
  b c :  ùîπ
  Œ± :  Lft
  P :  Prop‚àû

open ERA Borb·¥±·¥ø·¥¨ public using () renaming (_‚Üù_ to _‚Üù·¥Æ·µí ≥·µá_)

abstract

  lenv·¥Æ·µí ≥·µá-upd :  (E , #À£ (pÀá , Œ± , P) , ŒµÀ£)  ‚Üù·¥Æ·µí ≥·µá
                    Œª ((b ,-) : ‚àë b , E ‚â° ≈° (pÀá , b , Œ± , P)) ‚Üí
                      ≈° (qÀá , b , Œ± , P) , #À£ (qÀá , Œ± , P) , ŒµÀ£
  lenv·¥Æ·µí ≥·µá-upd {≈° _} (ŒµÀ£ ,-) (refl , ‚úì#bŒ±P) =  (-, refl) , refl , ‚úì#bŒ±P

  renv·¥Æ·µí ≥·µá-upd :  (E , ŒµÀ£ , #À£ (b , Œ± , P))  ‚Üù·¥Æ·µí ≥·µá
                    Œª ((pÀá ,-) : ‚àë pÀá , E ‚â° ≈° (pÀá , b , Œ± , P)) ‚Üí
                      ≈° (pÀá , c , Œ± , P) , ŒµÀ£ , #À£ (c , Œ± , P)
  renv·¥Æ·µí ≥·µá-upd {≈° _} (-, ŒµÀ£) (‚úì#pÀáŒ±P , refl) =  (-, refl) , ‚úì#pÀáŒ±P , refl

-- Bor·¥±·¥ø·¥¨ :  Borrow ERA

module BndBor =  Syho.Model.ERA.Bnd Borb·¥±·¥ø·¥¨ ≈à
  (Œª (≈à‚úìx , ≈à‚úìy) ‚Üí ≈à-‚úìÀ£ ≈à‚úìx , ≈à-‚úìÀ£ ≈à‚úìy)
open BndBor public using () renaming (
  --  Bor·¥±·¥ø·¥¨ :  ERA 1·¥∏ 1·¥∏ 1·¥∏ 1·¥∏
  Bnd·¥±·¥ø·¥¨ to Bor·¥±·¥ø·¥¨;
  injÀô to injÀô·¥Æ·µí ≥; injÀô-‚àô to injÀô·¥Æ·µí ≥-‚àô;
  ‚Üù·¥Æ‚Åø·µà-new to ‚Üù·¥Æ·µí ≥-new; injÀô-‚Üù·¥Æ‚Åø·µà to injÀô-‚Üù·¥Æ·µí ≥)

open ERA Bor·¥±·¥ø·¥¨ public using () renaming (Res to Res·¥Æ·µí ≥; _‚àô_ to _‚àô·¥Æ·µí ≥_;
  Œµ to Œµ·¥Æ·µí ≥; Env to Env·¥Æ·µí ≥; _‚úì_ to _‚úì·¥Æ·µí ≥_; _‚Üù_ to _‚Üù·¥Æ·µí ≥_; ‚ó†Àú_ to ‚ó†Àú·¥Æ·µí ≥_;
  Œµ-min to Œµ·¥Æ·µí ≥-min; ‚Üù-resp ≥ to ‚Üù·¥Æ·µí ≥-resp ≥; ‚Üù-mono ≥ to ‚Üù·¥Æ·µí ≥-mono ≥)

-- Resource for the mutable borrow token

bor·µê :  ‚Ñï ‚Üí  Lft ‚Üí  Prop‚àû ‚Üí  Res·¥Æ·µí ≥
bor·µê i Œ± P =  injÀô·¥Æ·µí ≥ i (#À£ (≈à , Œ± , P) , ŒµÀ£)

-- Resource for the open mutable borrow token

obor·µê :  ‚Ñï ‚Üí  Lft ‚Üí  ‚Ñö‚Å∫ ‚Üí  Prop‚àû ‚Üí  Res·¥Æ·µí ≥
obor·µê i Œ± p P =  injÀô·¥Æ·µí ≥ i (#À£ (≈° p , Œ± , P) , ŒµÀ£)

-- Resource for the lending token

lend :  ‚Ñï ‚Üí  Lft ‚Üí  Prop‚àû ‚Üí  Res·¥Æ·µí ≥
lend i Œ± P =  injÀô·¥Æ·µí ≥ i (ŒµÀ£ , #À£ (tt , Œ± , P))

private variable
  EÀô :  ‚Ñï ‚Üí Env·¥Æ·µí ≥·µá
  i n :  ‚Ñï
  p :  ‚Ñö‚Å∫

abstract

  -- Empty environment for Bor·¥±·¥ø·¥¨

  emp·¥Æ·µí ≥ :  Env·¥Æ·µí ≥
  emp·¥Æ·µí ≥ =  (Œª _ ‚Üí ≈à) , 0

  -- emp·¥Æ·µí ≥ with Œµ·¥Æ·µí ≥ is valid

  emp·¥Æ·µí ≥-‚úìŒµ :  emp·¥Æ·µí ≥ ‚úì·¥Æ·µí ≥ Œµ·¥Æ·µí ≥
  emp·¥Æ·µí ≥-‚úìŒµ =  (Œª _ _ ‚Üí refl) ,-

  -- Create bor·µê and lend at a fresh new index

  bor·µê-lend-new :
    ((EÀô , n) , Œµ·¥Æ·µí ≥)  ‚Üù·¥Æ·µí ≥ Œª (_ : ‚ä§‚ÇÄ) ‚Üí
      (updÀô n (≈° (≈à , tt , Œ± , P)) EÀô , ·π° n) , bor·µê n Œ± P ‚àô·¥Æ·µí ≥ lend n Œ± P
  bor·µê-lend-new =
    ‚Üù·¥Æ·µí ≥-resp ≥ {a = Œµ·¥Æ·µí ≥} (‚ó†Àú·¥Æ·µí ≥ injÀô·¥Æ·µí ≥-‚àô) $ ‚Üù·¥Æ·µí ≥-new (refl , refl)

  -- Turn bor·µê into obor·µê to update ¬ø ‚Ñö‚Å∫ from ≈à to ≈° p

  bor·µê-open :
    ((EÀô , n) , bor·µê i Œ± P)  ‚Üù·¥Æ·µí ≥
      Œª ((-, (b ,-)) :  i < n  √ó  (‚àë b , EÀô i ‚â° ≈° (≈à , b , Œ± , P))) ‚Üí
        (updÀô i (≈° (≈° p , b , Œ± , P)) EÀô , n) , obor·µê i Œ± p P
  bor·µê-open =  injÀô-‚Üù·¥Æ·µí ≥ (Œª ()) lenv·¥Æ·µí ≥·µá-upd

  -- Turn obor·µê into bor·µê to update ¬ø ‚Ñö‚Å∫ from ≈° p to ≈à

  obor·µê-close :
    ((EÀô , n) , obor·µê i Œ± p P)  ‚Üù·¥Æ·µí ≥
      Œª ((-, (b ,-)) :  i < n  √ó  (‚àë b , EÀô i ‚â° ≈° (≈° p , b , Œ± , P))) ‚Üí
        (updÀô i (≈° (≈à , b , Œ± , P)) EÀô , n) , bor·µê i Œ± P
  obor·µê-close =  injÀô-‚Üù·¥Æ·µí ≥ (Œª ()) lenv·¥Æ·µí ≥·µá-upd

  -- Consume lend to update ùîπ from tt to ff

  lend-back :
    ((EÀô , n) , lend i Œ± P)  ‚Üù·¥Æ·µí ≥
      Œª ((-, (pÀá ,-)) :  i < n  √ó  (‚àë pÀá , EÀô i ‚â° ≈° (pÀá , tt , Œ± , P))) ‚Üí
        (updÀô i (≈° (pÀá , ff , Œ± , P)) EÀô , n) , Œµ·¥Æ·µí ≥
  lend-back =  ‚Üù·¥Æ·µí ≥-mono ≥ {bÀô = Œª _ ‚Üí injÀô·¥Æ·µí ≥ _ _} {a = lend _ _ _} Œµ·¥Æ·µí ≥-min $
    injÀô-‚Üù·¥Æ·µí ≥ {bÀ£ = Œª _ ‚Üí ŒµÀ£ , #À£ _} (Œª ()) renv·¥Æ·µí ≥·µá-upd
