--------------------------------------------------------------------------------
-- Hoare triple
--------------------------------------------------------------------------------

{-# OPTIONS --without-K --sized-types #-}

module Syho.Logic.Hor where

open import Base.Level using (‚Üë_)
open import Base.Size using (Size; ‚àû)
open import Base.Func using (_$_)
open import Base.Prod using (_,_; -,_)
open import Base.Sum using (inj‚ÇÄ; inj‚ÇÅ)
open import Syho.Logic.Prop using (Prop'; _‚àó_)
open import Syho.Logic.Core using (_‚ä¢[_]_; _¬ª_; ‚àó-comm)
open import Syho.Logic.Supd using (_‚ä¢[_][_]‚áõ_; ‚ä¢‚áí‚ä¢‚áõ; ‚áõ-refl)
open import Syho.Lang.Expr using (Type; Expr; Val; letÀô; val)
open import Syho.Lang.Ktxred using (nd·¥ø; Ktx; ‚Ä¢·¥∑; _‚óÅ·¥∑ ≥_; _·¥∑|·¥ø_; Val/Ktxred)

-- Import and re-export
open import Syho.Logic.Judg public using (WpKind; par; tot; _‚ä¢[_]‚Å∫‚ü®_‚ü©[_]_;
  _‚ä¢[_]‚Å∫‚ü®_‚ü©·¥æ_; _‚ä¢[_]‚Å∫‚ü®_‚ü©·µÄ[_]_; _‚ä¢[_]‚ü®_‚ü©[_]_; _‚ä¢[_]‚ü®_‚ü©·¥æ_; _‚ä¢[<_]‚ü®_‚ü©·¥æ_;
  _‚ä¢[_]‚ü®_‚ü©·µÄ[_]_; _‚ä¢[<_]‚ü®_‚ü©·µÄ[_]_; hor-·µÄ‚áí·¥æ; hor·µÄ-suc; _·µò¬ª ∞_; _ ∞¬ª·µò_; hor-frameÀ°;
  hor-bind; hor-val·µò; hor-nd·µò; hor·¥æ-‚ñ∂; hor·µÄ-‚ñ∂; hor-‚óÅ; hor-üû∞; hor-‚Üê; hor-alloc;
  hor-free)

private variable
  Œπ :  Size
  A :  Set‚ÇÄ
  T U :  Type
  wŒ∫ :  WpKind
  P P' R :  Prop' ‚àû
  Q·µõ Q'·µõ R·µõ :  Val T ‚Üí Prop' ‚àû
  vk :  Val/Ktxred T
  ktx :  Ktx U T
  e‚ÇÄ :  Expr ‚àû T
  eÀô :  A ‚Üí Expr ‚àû T
  v :  Val T

infixr -1 _ ∞¬ª_

abstract

  -->  hor-·µÄ‚áí·¥æ :  P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©·µÄ  Q·µõ  ‚Üí   P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©·¥æ  Q·µõ

  -->  hor·µÄ-suc :  P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©·µÄ[ i ]  Q·µõ  ‚Üí
  -->              P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©·µÄ[ suc i ]  Q·µõ

  -->  hor-bind :  P  ‚ä¢[ Œπ ]‚ü® e ‚ü©[ wŒ∫ ]  Q·µõ  ‚Üí
  -->              (‚àÄ v ‚Üí  Q·µõ v  ‚ä¢[ Œπ ]‚ü® ktx ·¥∑‚óÅ V‚áíE v ‚ü©[ wŒ∫ ]  R·µõ)  ‚Üí
  -->              P  ‚ä¢[ Œπ ]‚ü® ktx ·¥∑‚óÅ e ‚ü©[ wŒ∫ ]  R·µõ

  -->  hor·¥æ-‚ñ∂ :  P  ‚ä¢[< Œπ ]‚ü® ktx ·¥∑‚óÅ eÀÇ .! ‚ü©·¥æ  Q·µõ  ‚Üí
  -->            P  ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÅ $ ktx ·¥∑|·¥ø ‚ñ∂·¥ø eÀÇ ‚ü©·¥æ  Q·µõ

  -->  hor·µÄ-‚ñ∂ :  P  ‚ä¢[ Œπ ]‚ü® ktx ·¥∑‚óÅ eÀÇ .! ‚ü©·µÄ[ i ]  Q·µõ  ‚Üí
  -->            P  ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÅ $ ktx ·¥∑|·¥ø ‚ñ∂·¥ø eÀÇ ‚ü©·µÄ[ i ]  Q·µõ

  -->  hor-‚óÅ :  P  ‚ä¢[ Œπ ]‚ü® ktx ·¥∑‚óÅ eÀô x ‚ü©[ wŒ∫ ]  Q·µõ  ‚Üí
  -->           P  ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÅ $ ktx ·¥∑|·¥ø eÀô ‚óÅ·¥ø x ‚ü©[ wŒ∫ ]  Q·µõ

  -->  hor-üû∞ :  Œ∏ ‚Ü¶‚ü® p ‚ü© (V , v)  ‚àó  P  ‚ä¢[ Œπ ]‚ü® ktx ·¥∑‚óÅ V‚áíE v ‚ü©[ wŒ∫ ]  Q·µõ  ‚Üí
  -->           Œ∏ ‚Ü¶‚ü® p ‚ü© (-, v)  ‚àó  P  ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÅ $ ktx ·¥∑|·¥ø üû∞·¥ø Œ∏ ‚ü©[ wŒ∫ ]  Q·µõ

  -->  hor-‚Üê :  Œ∏ ‚Ü¶ (V , v)  ‚àó  P  ‚ä¢[ Œπ ]‚ü® ktx ·¥∑‚óÅ ‚àá _ ‚ü©[ wŒ∫ ]  Q·µõ  ‚Üí
  -->           Œ∏ ‚Ü¶ av  ‚àó  P  ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÅ $ ktx ·¥∑|·¥ø Œ∏ ‚Üê·¥ø v ‚ü©[ wŒ∫ ]  Q·µõ

  -->  hor-alloc :
  -->    (‚àÄ Œ∏ ‚Üí  Œ∏ ‚Ü¶À° rep n ‚ä§-val  ‚àó  Free n Œ∏  ‚àó  P
  -->              ‚ä¢[ Œπ ]‚ü® ktx ·¥∑‚óÅ ‚àá Œ∏ ‚ü©[ wŒ∫ ]  Q·µõ)  ‚Üí
  -->    P  ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÅ $ ktx ·¥∑|·¥ø alloc·¥ø n ‚ü©[ wŒ∫ ]  Q·µõ

  -->  hor-free :
  -->    len avs ‚â° n ‚Üí  P  ‚ä¢[ Œπ ]‚ü® ktx ·¥∑‚óÅ ‚àá _ ‚ü©[ wŒ∫ ]  Q·µõ  ‚Üí
  -->    Œ∏ ‚Ü¶À° avs  ‚àó  Free n Œ∏  ‚àó  P
  -->      ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÅ $ ktx ·¥∑|·¥ø free·¥ø Œ∏ ‚ü©[ wŒ∫ ]  Q·µõ

  -- Compose

  -->  _·µò¬ª ∞_ :  P  ‚ä¢[ Œπ ][ i ]‚áõ  Q  ‚Üí   Q  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©[ wŒ∫ ]  R·µõ  ‚Üí
  -->           P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©[ wŒ∫ ]  R·µõ

  -->  _ ∞¬ª·µò_ :  P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©[ wŒ∫ ]  Q·µõ  ‚Üí
  -->           (‚àÄ v ‚Üí  Q·µõ v  ‚ä¢[ Œπ ][ i ]‚áõ  R·µõ v)  ‚Üí
  -->           P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©[ wŒ∫ ]  R·µõ

  _ ∞¬ª_ :  P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©[ wŒ∫ ]  Q·µõ  ‚Üí   (‚àÄ v ‚Üí  Q·µõ v  ‚ä¢[ Œπ ]  R·µõ v)  ‚Üí
          P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©[ wŒ∫ ]  R·µõ
  P‚ä¢‚ü®vk‚ü©Q  ∞¬ª ‚àÄvQ‚ä¢R =  P‚ä¢‚ü®vk‚ü©Q  ∞¬ª·µò Œª _ ‚Üí ‚ä¢‚áí‚ä¢‚áõ {i = 0} $ ‚àÄvQ‚ä¢R _

  -- Frame

  -->  hor-frameÀ° :  P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©[ wŒ∫ ]  Q·µõ  ‚Üí
  -->                R  ‚àó  P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©[ wŒ∫ ]  Œª v ‚Üí  R  ‚àó  Q·µõ v

  hor-frame ≥ :  P  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©[ wŒ∫ ]  Q·µõ  ‚Üí
                P  ‚àó  R  ‚ä¢[ Œπ ]‚Å∫‚ü® vk ‚ü©[ wŒ∫ ]  Œª v ‚Üí  Q·µõ v  ‚àó  R
  hor-frame ≥ P‚ä¢‚ü®vk‚ü©Q =  ‚àó-comm ¬ª hor-frameÀ° P‚ä¢‚ü®vk‚ü©Q  ∞¬ª Œª _ ‚Üí ‚àó-comm

  -- Value

  -->  hor-val·µò :  P  ‚ä¢[ Œπ ]‚áõ  Q·µõ v  ‚Üí   P  ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÄ v ‚ü©[ wŒ∫ ]  Q·µõ

  hor-val :  P  ‚ä¢[ Œπ ]  Q·µõ v  ‚Üí   P  ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÄ v ‚ü©[ wŒ∫ ]  Q·µõ
  hor-val P‚ä¢Q =  hor-val·µò $ ‚ä¢‚áí‚ä¢‚áõ {i = 0} P‚ä¢Q

  -- Non-deterministic value

  -->  hor-nd·µò :  (‚àÄ x ‚Üí  P  ‚ä¢[ Œπ ]‚áõ  Q·µõ (‚Üë x))  ‚Üí
  -->             P  ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÅ $ ktx ·¥∑|·¥ø nd·¥ø ‚ü©[ wŒ∫ ]  Q·µõ

  hor-nd :  (‚àÄ x ‚Üí  P  ‚ä¢[ Œπ ]  Q·µõ (val x))  ‚Üí
            P  ‚ä¢[ Œπ ]‚Å∫‚ü® inj‚ÇÅ $ ktx ·¥∑|·¥ø nd·¥ø ‚ü©[ wŒ∫ ]  Q·µõ
  hor-nd ‚àÄxP‚ä¢Q =  hor-nd·µò $ Œª _ ‚Üí ‚ä¢‚áí‚ä¢‚áõ {i = 0} $ ‚àÄxP‚ä¢Q _

  -- Let binding

  hor-let :  P  ‚ä¢[ Œπ ]‚ü® e‚ÇÄ ‚ü©[ wŒ∫ ]  Q·µõ  ‚Üí
             (‚àÄ x ‚Üí  Q·µõ (val x)  ‚ä¢[ Œπ ]‚ü® eÀô x ‚ü©[ wŒ∫ ]  R·µõ) ‚Üí
             P  ‚ä¢[ Œπ ]‚ü® letÀô e‚ÇÄ eÀô ‚ü©[ wŒ∫ ]  R·µõ
  hor-let P‚ä¢‚ü®e‚ÇÄ‚ü©Q ‚àÄxQ‚ä¢‚ü®eÀô‚ü©R =
    hor-bind {ktx = _ ‚óÅ·¥∑ ≥ ‚Ä¢·¥∑} P‚ä¢‚ü®e‚ÇÄ‚ü©Q Œª{ (val x) ‚Üí hor-‚óÅ $ ‚àÄxQ‚ä¢‚ü®eÀô‚ü©R x }
