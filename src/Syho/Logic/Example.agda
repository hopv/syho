--------------------------------------------------------------------------------
-- Example
--------------------------------------------------------------------------------

{-# OPTIONS --without-K --sized-types #-}

module Syho.Logic.Example where

open import Base.Func using (_$_; it)
open import Base.Eq using (_‚â°_; refl)
open import Base.Dec using ()
open import Base.Acc using (Acc; acc)
open import Base.Size using (ùïä; !)
open import Base.Prod using (_√ó_; _,_; -,_)
open import Base.Nat using (‚Ñï; ·π°_; _‚â§_; _<_; ·πó_; _+_; _‚äî_; ‚â§-refl; ‚â§-trans;
  <-wf; ·πó-decr; ‚äî-introÀ°; ‚äî-comm)
open import Base.List using (List; []; _‚à∑_)
open import Base.Seq using (Seq‚àû; _‚à∑À¢_; hdÀ¢; tlÀ¢; repÀ¢; rep¬≤À¢; takeÀ¢)
open import Base.Sety using ()
open import Syho.Lang.Expr using (Addr; ‚ó∏_; _‚Ü∑_; ExprÀÇ‚àû; ‚àá_; üû∞_; Type; TyVal;
  loop)
open import Syho.Lang.Example using (plus‚óÅ3,4; decrep; decrep'; ndecrep;
  ndecrep‚óè‚àû; fad·¥ø; fad; fadrep; fadrep'; forksfadrep; nforksfadrep; cntr‚Üê)
open import Syho.Logic.Prop using (Name; strnm; Prop'; Prop‚àû; ¬°·¥æ_; ‚àÄ-syntax;
  ‚àÉ-syntax; ‚ä§'; ‚ä•'; ‚åú_‚åù‚àß_; ‚åú_‚åù; _‚àó_; ‚ñ°_; ‚óã_; _‚Ü¶_; _‚Ü™‚ü®_‚ü©·µÄ[_]_; [^_]·¥∫; &‚Å±‚ü®_‚ü©_;
  static; _‚Ü¶‚Å±_; #·µÅ·µá‚ü®_‚ü©_; ‚â§·µÅ·µá‚ü®_‚ü©_; ^·∂ª·¥∫-‚úî)
open import Syho.Logic.Core using (_‚ä¢[_]_; Pers; ‚ä¢-refl; _¬ª_; ‚àÄ-intro; ‚àÉ-elim;
  ‚àÄ-elim; ‚àÉ-intro; ‚ä§-intro; ‚åú‚åù-intro; retain-‚åú‚åù; ‚àó-mono; ‚àó-monoÀ°; ‚àó-mono ≥;
  ‚àó-mono ≥¬≤; ‚àó-comm; ‚àó-assocÀ°; ‚àó-assoc ≥; ?‚àó-comm; ‚àó-pull ≥¬≤À°; ‚àó-push ≥¬≤À°; ‚àó-elimÀ°;
  ‚àó-elim ≥; ‚ä§‚àó-intro; ‚àó‚ä§-intro; ‚àÉ‚àó-elim; ‚àó‚àÉ-elim; dup-Pers-‚àó; -‚àó-introÀ°;
  -‚àó-intro ≥; ‚ñ°-mono; ‚ñ°-dup; ‚àÉ-Pers; ‚ñ°-elim; ‚ñ°-intro-Pers; dup-Pers)
open import Syho.Logic.Fupd using (_‚ä¢[_][_]‚áõ_; ‚§á‚áí‚áõ; ‚áí‚áõ; _·µò¬ª·µò_; _·µò¬ª_; ‚áõ-frameÀ°;
  ‚áõ-frame ≥)
open import Syho.Logic.Hor using (_‚ä¢[_][_]·µÉ‚ü®_‚ü©_; _‚ä¢[_]‚ü®_‚ü©·¥æ_; _‚ä¢[_]‚ü®_‚ü©·µÄ[_]_;
  _‚ä¢[_][_]‚ü®_‚ü©‚àû; _·µò¬ª·µÉ ∞_; _·µò¬ª ∞_; _·µÉ ∞¬ª·µò_; ahor-frameÀ°; ahor-frame ≥; ahor‚úî-hor;
  hor-val·µò; hor-val; hor-nd; hor-[]; ihor-[]‚óè; hor-ihor-‚Åè-bind; hor-fork)
open import Syho.Logic.Mem using (ahor-fau; hor-üû∞; hor-‚Üê)
open import Syho.Logic.Ind using (‚óã-mono; ‚óã-new; ‚ñ°‚óã-new-rec; ‚óã-use; ‚óã‚áí‚Ü™‚ü®‚ü©;
  ‚Ü™‚ü®‚ü©·µÄ-use)
open import Syho.Logic.Inv using (&‚Å±-new; &‚Å±-open; %‚Å±-close; hor-‚Ü¶‚Å±-üû∞)
open import Syho.Logic.Ub using (‚â§·µÅ·µá-#·µÅ·µá; #·µÅ·µá-new; #·µÅ·µá-upd)

private variable
  Œπ :  ùïä
  i j k l m m' n o :  ‚Ñï
  Œ∏ Œ∏' Œ∏·∂ú :  Addr
  ·µóv :  TyVal
  X :  Set‚ÇÄ
  P :  Prop‚àû
  QÀô :  X ‚Üí Prop‚àû
  T :  Type
  eÀÇÀô :  X ‚Üí ExprÀÇ‚àû T
  ns : List ‚Ñï
  nsÀ¢ :  Seq‚àû ‚Ñï

-- ‚ñ° ‚óã ‚ñ° ‚óã ‚ñ° ‚óã ‚Ä¶

‚ñ°‚óã‚àû :  Prop' Œπ
‚ñ°‚óã‚àû =  ‚ñ° ‚óã Œª{ .! ‚Üí ‚ñ°‚óã‚àû }

abstract

  ------------------------------------------------------------------------------
  -- Get ‚ñ°‚óã‚àû for free

  ‚ñ°‚óã‚àû-new :  ‚ä§' ‚ä¢[ Œπ ][ i ]‚áõ ‚ñ°‚óã‚àû
  ‚ñ°‚óã‚àû-new =  -‚àó-introÀ° (‚àó-elimÀ° ¬ª ‚ñ°-dup) ¬ª ‚ñ°‚óã-new-rec

  ------------------------------------------------------------------------------
  -- Get any partial Hoare triple for loop
  -- This uses coinduction by thunk for the infinite execution of loop

  hor·¥æ-loop :  P ‚ä¢[ Œπ ]‚ü® loop ‚ü©·¥æ QÀô
  hor·¥æ-loop =  hor-[] Œª{ .! ‚Üí hor·¥æ-loop }

  ------------------------------------------------------------------------------
  -- Total Hoare triple for plus ‚óÅ ‚àá (3 , 4)

  hor·µÄ-plus‚óÅ3,4 :  ‚ä§'  ‚ä¢[ Œπ ]‚ü® plus‚óÅ3,4 ‚ü©·µÄ[ i ] Œª n ‚Üí  ‚åú n ‚â° 7 ‚åù
  hor·µÄ-plus‚óÅ3,4 =  hor-[] $ hor-val $ ‚åú‚åù-intro refl

  ------------------------------------------------------------------------------
  -- Sequential decrement loop: Example for the total Hoare triple

  -- Total Hoare triple for decrep

  -- The proof guarantees termination by induction over n
  -- Notably, we take advantage of Agda's termination checker here

  hor·µÄ-decrep :  Œ∏ ‚Ü¶ (-, n)  ‚ä¢[ Œπ ]‚ü® decrep Œ∏ ‚ü©·µÄ[ i ] Œª _ ‚Üí  Œ∏ ‚Ü¶ (-, 0)
  hor·µÄ-decrep' :  Œ∏ ‚Ü¶ (-, n)  ‚ä¢[ Œπ ]‚ü® decrep' Œ∏ n ‚ü©·µÄ[ i ] Œª _ ‚Üí  Œ∏ ‚Ü¶ (-, 0)

  hor·µÄ-decrep =  ‚àó‚ä§-intro ¬ª hor-üû∞ $ hor-[] $ ‚àó-elimÀ° ¬ª hor·µÄ-decrep'

  hor·µÄ-decrep' {n = 0} =  hor-val ‚ä¢-refl
  hor·µÄ-decrep' {n = ·π° _} =  ‚àó‚ä§-intro ¬ª hor-‚Üê $ hor-[] $ ‚àó-elimÀ° ¬ª hor·µÄ-decrep

  -- Total Hoare triple for ndecrep, ensuring termination

  -- Notably, the number of reduction steps is dynamically determined
  -- Still, the proof here is totally natural; in particular, we don't need to
  -- craft a bound by an ordinal number, unlike Transfinite Iris

  hor·µÄ-ndecrep :  Œ∏ ‚Ü¶ ·µóv  ‚ä¢[ Œπ ]‚ü® ndecrep Œ∏ ‚ü©·µÄ[ i ] Œª _ ‚Üí  Œ∏ ‚Ü¶ (-, 0)
  hor·µÄ-ndecrep =  hor-nd Œª _ ‚Üí ‚àó‚ä§-intro ¬ª hor-‚Üê $ ‚àó-elimÀ° ¬ª hor-[] hor·µÄ-decrep

  ------------------------------------------------------------------------------
  -- Infinite Hoare triple, for ndecrep‚óè‚àû

  ihor-ndecrep‚óè‚àû :  Œ∏ ‚Ü¶ ·µóv  ‚ä¢[ Œπ ][ i ]‚ü® ndecrep‚óè‚àû Œ∏ ‚ü©‚àû
  ihor-ndecrep‚óè‚àû =  hor-ihor-‚Åè-bind {e = ndecrep _} {i = 0}
    hor·µÄ-ndecrep Œª _ ‚Üí ihor-[]‚óè Œª{ .! ‚Üí ihor-ndecrep‚óè‚àû }

  ------------------------------------------------------------------------------
  -- Concurrent decrement loop: Example for the total Hoare triple, the
  --                            impredicative invariant, and the upper bound

  -- &ub‚Ü¶ :  Invariant that contains a full points-to token Œ∏ ‚Ü¶ (-, n) for some
  --         number n under an upper-boundee token #·µÅ·µá‚ü® i ‚ü© n
  --         When we have &ub‚Ü¶ Œ∏ i, any threads can freely decrease the value at
  --         Œ∏, but never increase it

  ub :  Name
  ub =  strnm "ub"

  &ub‚Ü¶ :  Addr ‚Üí  ‚Ñï ‚Üí  Prop‚àû
  &ub‚Ü¶ Œ∏ o =  &‚Å±‚ü® ub ‚ü© ¬°·¥æ (‚àÉ n , #·µÅ·µá‚ü® o ‚ü© n ‚àó Œ∏ ‚Ü¶ (-, n))

  -- Create ‚â§·µÅ·µá‚ü® o ‚ü© n and &ub‚Ü¶ Œ∏ o out of Œ∏ ‚Ü¶ (-, n)

  &ub‚Ü¶-new :  Œ∏ ‚Ü¶ (-, n)  ‚ä¢[ Œπ ][ i ]‚áõ  ‚àÉ o ,  ‚â§·µÅ·µá‚ü® o ‚ü© n  ‚àó  &ub‚Ü¶ Œ∏ o
  &ub‚Ü¶-new =  ‚ä§‚àó-intro ¬ª ‚áõ-frameÀ° (#·µÅ·µá-new ¬ª ‚§á‚áí‚áõ) ·µò¬ª·µò ‚àÉ‚àó-elim Œª o ‚Üí
    ‚àó-assoc ≥ ¬ª ‚àó-mono ≥ (‚àÉ-intro _) ¬ª ‚áõ-frame ≥ &‚Å±-new ·µò¬ª ‚àÉ-intro o

  -- Atomic Hoare triple for fad under #·µÅ·µá and ‚Ü¶, updating ‚â§·µÅ·µá

  ahor-fad-#·µÅ·µá-‚Ü¶ :
    ‚â§·µÅ·µá‚ü® o ‚ü© n  ‚àó  #·µÅ·µá‚ü® o ‚ü© m' ‚àó Œ∏ ‚Ü¶ (-, m')  ‚ä¢[ Œπ ][ i ]·µÉ‚ü® fad·¥ø Œ∏ ‚ü© Œª m ‚Üí
      ‚åú m ‚â§ n ‚åù‚àß  ‚â§·µÅ·µá‚ü® o ‚ü© ·πó m  ‚àó  #·µÅ·µá‚ü® o ‚ü© ·πó m  ‚àó Œ∏ ‚Ü¶ (-, ·πó m)
  ahor-fad-#·µÅ·µá-‚Ü¶ =  ‚àó-assocÀ° ¬ª ‚àó-monoÀ° (retain-‚åú‚åù ‚â§·µÅ·µá-#·µÅ·µá) ¬ª ‚àÉ‚àó-elim Œª m‚â§n ‚Üí
    ‚àó-monoÀ° ‚àó-elim ≥ ¬ª ahor-frame ≥ ahor-fau ·µÉ ∞¬ª·µò Œª m ‚Üí ‚àó‚àÉ-elim Œª{ refl ‚Üí
    ‚áõ-frameÀ° {i = 0} (#·µÅ·µá-upd ·πó-decr ¬ª ‚§á‚áí‚áõ) ·µò¬ª ‚àó-assoc ≥ ¬ª ‚àÉ-intro m‚â§n }

  -- Atomic Hoare triple for fad under &ub‚Ü¶, updating ‚â§·µÅ·µá

  ahor-fad-&ub‚Ü¶ :
    [^ ub ]·¥∫  ‚àó  ‚â§·µÅ·µá‚ü® o ‚ü© n  ‚àó  &ub‚Ü¶ Œ∏ o  ‚ä¢[ Œπ ][ i ]·µÉ‚ü® fad·¥ø Œ∏ ‚ü© Œª m ‚Üí
      [^ ub ]·¥∫  ‚àó  (‚åú m ‚â§ n ‚åù‚àß  ‚â§·µÅ·µá‚ü® o ‚ü© ·πó m  ‚àó  &ub‚Ü¶ Œ∏ o)
  ahor-fad-&ub‚Ü¶ =  ‚àó-mono ≥¬≤ dup-Pers ¬ª ‚àó-push ≥¬≤À° ¬ª ‚àó-push ≥¬≤À° ¬ª ‚àó-assocÀ° ¬ª
    ‚áõ-frameÀ° {i = 0} &‚Å±-open ·µò¬ª·µÉ ∞ ‚àó-assoc ≥ ¬ª ‚àó-pull ≥¬≤À° ¬ª ‚àó-assocÀ° ¬ª
    ahor-frameÀ° (‚àó‚àÉ-elim Œª _ ‚Üí ahor-fad-#·µÅ·µá-‚Ü¶) ·µÉ ∞¬ª·µò Œª m ‚Üí ‚àÉ‚àó-elim Œª m‚â§n ‚Üí
    ‚àó-assoc ≥ ¬ª ‚àó-push ≥¬≤À° ¬ª ‚àó-monoÀ° (‚àÉ-intro _) ¬ª ‚àó-assocÀ° ¬ª
    ‚áõ-frameÀ° {i = 0} %‚Å±-close ·µò¬ª ‚àó-mono ≥ $ ‚àÉ-intro m‚â§n

  -- Total Hoare triple for fadrep under ‚â§·µÅ·µá and &ub‚Ü¶
  -- The proof goes by well-founded induction over the upper bound n

  hor·µÄ-fadrep-&ub‚Ü¶-Acc :  Acc _<_ n  ‚Üí
    ‚â§·µÅ·µá‚ü® o ‚ü© n  ‚àó  &ub‚Ü¶ Œ∏ o  ‚ä¢[ Œπ ]‚ü® fadrep Œ∏ ‚ü©·µÄ[ i ] Œª _ ‚Üí  ‚ä§'
  hor·µÄ-fadrep'-&ub‚Ü¶-Acc :  Acc _<_ n  ‚Üí   m ‚â§ n  ‚Üí
    ‚â§·µÅ·µá‚ü® o ‚ü© ·πó m  ‚àó  &ub‚Ü¶ Œ∏ o  ‚ä¢[ Œπ ]‚ü® fadrep' Œ∏ m ‚ü©·µÄ[ i ] Œª _ ‚Üí  ‚ä§'

  hor·µÄ-fadrep-&ub‚Ü¶-Acc Accn =  ahor‚úî-hor {i = 0} ^·∂ª·¥∫-‚úî ahor-fad-&ub‚Ü¶ Œª m ‚Üí
    ‚àÉ-elim Œª m‚â§n ‚Üí hor-[] $ hor·µÄ-fadrep'-&ub‚Ü¶-Acc Accn m‚â§n
  hor·µÄ-fadrep'-&ub‚Ü¶-Acc {m = 0} _ _ =  hor-val ‚ä§-intro
  hor·µÄ-fadrep'-&ub‚Ü¶-Acc {m = ·π° _} (acc <n‚áíacc) m'<n =
    hor·µÄ-fadrep-&ub‚Ü¶-Acc (<n‚áíacc m'<n)

  hor·µÄ-fadrep-&ub‚Ü¶ :
    ‚â§·µÅ·µá‚ü® o ‚ü© n  ‚àó  &ub‚Ü¶ Œ∏ o  ‚ä¢[ Œπ ]‚ü® fadrep Œ∏ ‚ü©·µÄ[ i ] Œª _ ‚Üí  ‚ä§'
  hor·µÄ-fadrep-&ub‚Ü¶ =  hor·µÄ-fadrep-&ub‚Ü¶-Acc <-wf

  -- Total Hoare triple for forksfadrep Œ∏ k, which forks k threads that perform
  -- fadrep Œ∏

  hor·µÄ-forksfadrep-&ub‚Ü¶ :
    ‚â§·µÅ·µá‚ü® o ‚ü© n  ‚àó  &ub‚Ü¶ Œ∏ o  ‚ä¢[ Œπ ]‚ü® forksfadrep Œ∏ k ‚ü©·µÄ[ i ] Œª _ ‚Üí  ‚ä§'
  hor·µÄ-forksfadrep-&ub‚Ü¶ {k = 0} =  hor-val ‚ä§-intro
  hor·µÄ-forksfadrep-&ub‚Ü¶ {k = ·π° _} =  dup-Pers ¬ª
    hor-fork hor·µÄ-fadrep-&ub‚Ü¶ $ hor-[] hor·µÄ-forksfadrep-&ub‚Ü¶

  hor·µÄ-forksfadrep :  Œ∏ ‚Ü¶ (-, n)  ‚ä¢[ Œπ ]‚ü® forksfadrep Œ∏ k ‚ü©·µÄ[ i ] Œª _ ‚Üí  ‚ä§'
  hor·µÄ-forksfadrep =  &ub‚Ü¶-new {i = 0} ·µò¬ª ∞ ‚àÉ-elim Œª _ ‚Üí hor·µÄ-forksfadrep-&ub‚Ü¶

  -- Total Hoare triple for nforksfadrep

  -- Notably, the number of threads and the number of iterations of each thread
  -- are dynamically determined; still the proof here is totally natural

  hor·µÄ-nforksfadrep :  Œ∏ ‚Ü¶ ·µóv  ‚ä¢[ Œπ ]‚ü® nforksfadrep Œ∏ ‚ü©·µÄ[ i ] Œª _ ‚Üí  ‚ä§'
  hor·µÄ-nforksfadrep =  hor-nd Œª _ ‚Üí ‚àó‚ä§-intro ¬ª hor-‚Üê $ hor-[] $ ‚àó-elimÀ° ¬ª
    hor-nd Œª _ ‚Üí hor-[] hor·µÄ-forksfadrep

  ------------------------------------------------------------------------------
  -- Counter: Example for the total Hoare-triple precursor

  -- Specification for a counter eÀÇÀô

  -- Thanks to the coinductivity of the total Hoare-triple precursor ‚Ü™‚ü® ‚ü©·µÄ, we
  -- can construct the infinite proposition Cntr, which returns Cntr itself with
  -- an updated parameter k + n after executing the counter

  -- This amounts to construction of a recursive type over a function type
  -- Notably, this spec just states about the observable behaviors and abstracts
  -- the internal state of the function

  Cntr :  (‚Ñï ‚Üí ExprÀÇ‚àû (‚ó∏ ‚Ñï)) ‚Üí  ‚Ñï ‚Üí  Prop' Œπ
  Cntr eÀÇÀô n =  ‚àÄ' k ,
    ¬°·¥æ ‚ä§' ‚Ü™‚ü® eÀÇÀô k .! ‚ü©·µÄ[ 0 ] Œª{ m .! ‚Üí ‚åú m ‚â° n ‚åù‚àß Cntr eÀÇÀô (k + n) }

  -- Use Cntr eÀÇÀô to get a total Hoare triple for eÀÇÀô
  -- The level of the total Hoare triple is 1, not 0

  Cntr-use :  Cntr eÀÇÀô n  ‚ä¢[ Œπ ]‚ü® eÀÇÀô k .! ‚ü©·µÄ[ 1 ] Œª m ‚Üí
                ‚åú m ‚â° n ‚åù‚àß Cntr eÀÇÀô (k + n)
  Cntr-use =  ‚àÄ-elim _ ¬ª ‚ä§‚àó-intro ¬ª ‚Ü™‚ü®‚ü©·µÄ-use

  -- Get Cntr (cntr‚Üê Œ∏) n from a full points-to token Œ∏ ‚Ü¶ (-, n)
  -- Thanks to the coinductivity of ‚óã‚áí‚Ü™‚ü®‚ü©, we can successfully perform the
  -- infinite construction of Cntr

  cntr‚Üê-Cntr :  Œ∏ ‚Ü¶ (-, n)  ‚ä¢[ Œπ ][ i ]‚áõ  Cntr (cntr‚Üê Œ∏) n
  cntr‚Üê-Cntr =  ‚óã-new {PÀÇ = ¬°·¥æ _} ·µò¬ª ‚àÄ-intro Œª _ ‚Üí ‚óã‚áí‚Ü™‚ü®‚ü© Œª{ .! ‚Üí
    ‚àó-comm ¬ª hor-üû∞ $ hor-[] $ hor-‚Üê $ hor-[] $ hor-val·µò {i = 0} $
    ‚àó-elimÀ° ¬ª cntr‚Üê-Cntr ·µò¬ª ‚àÉ-intro refl }

  ------------------------------------------------------------------------------
  -- Static singly-linked list: Example for the indirection modality ‚óã

  -- Static singly-linked list over a list

  Slist :  List ‚Ñï ‚Üí  Addr ‚Üí  Prop‚àû
  Slist (n ‚à∑ ns) Œ∏ =  ‚àÉ Œ∏' , Œ∏ ‚Ü¶‚Å± (-, n , Œ∏') ‚àó Slist ns Œ∏'
  Slist [] _ =  ‚ä§'

  -- Static singly-linked list over a sequence
  -- We leverage here the coinductivity of the indirection modality ‚óã,
  -- just like Iris's guarded recursion using the later modality ‚ñ∑

  Slist‚àû :  Seq‚àû ‚Ñï ‚Üí  Addr ‚Üí  Prop' Œπ
  Slist‚àû (n ‚à∑À¢ nsÀ¢ÀÇ) Œ∏ =
    ‚àÉ Œ∏' , Œ∏ ‚Ü¶‚Å± (-, n , Œ∏') ‚àó ‚ñ° ‚óã Œª{ .! ‚Üí Slist‚àû (nsÀ¢ÀÇ .!) Œ∏' }

  -- Static singly-linked infinite list with a bound
  -- Again, we leverage here the coinductivity of the indirection modality ‚óã

  Slist‚àû‚â§ :  ‚Ñï ‚Üí  Addr ‚Üí  Prop' Œπ
  Slist‚àû‚â§ k Œ∏ =  ‚àÉ n , ‚àÉ Œ∏' , ‚åú n ‚â§ k ‚åù‚àß
    Œ∏ ‚Ü¶‚Å± (-, n , Œ∏') ‚àó ‚ñ° ‚óã Œª{ .! ‚Üí Slist‚àû‚â§ k Œ∏' }

  -- Slist is persistent

  Slist-Pers :  Pers $ Slist ns Œ∏
  Slist-Pers {[]} =  it
  Slist-Pers {_ ‚à∑ ns'} =  let instance _ = Slist-Pers {ns'} in ‚àÉ-Pers Œª _ ‚Üí it

  instance

    -- Slist‚àû is persistent

    Slist‚àû-Pers :  Pers $ Slist‚àû nsÀ¢ Œ∏
    Slist‚àû-Pers {_ ‚à∑À¢ _} =  ‚àÉ-Pers Œª _ ‚Üí it

    -- Slist‚àû‚â§ is persistent

    Slist‚àû‚â§-Pers :  Pers $ Slist‚àû‚â§ n Œ∏
    Slist‚àû‚â§-Pers =  ‚àÉ-Pers Œª _ ‚Üí ‚àÉ-Pers Œª _ ‚Üí ‚àÉ-Pers Œª _ ‚Üí it

  -- Monotonicity of Slist‚àû‚â§
  -- Thanks to the coinductivity of ‚óã-mono, we can get a pure sequent for the
  -- infinite proposition Slist‚àû‚â§

  Slist‚àû‚â§-mono :  k ‚â§ l  ‚Üí   Slist‚àû‚â§ k Œ∏  ‚ä¢[ Œπ ]  Slist‚àû‚â§ l Œ∏
  Slist‚àû‚â§-mono k‚â§l =  ‚àÉ-elim Œª _ ‚Üí ‚àÉ-elim Œª _ ‚Üí ‚àÉ-elim Œª n‚â§k ‚Üí
    ‚àó-mono ≥ (‚ñ°-mono $ ‚óã-mono Œª{ .! ‚Üí Slist‚àû‚â§-mono k‚â§l }) ¬ª
    ‚àÉ-intro (‚â§-trans n‚â§k k‚â§l) ¬ª ‚àÉ-intro _ ¬ª ‚àÉ-intro _

  -- Slist‚àû (repÀ¢ n) into Slist‚àû‚â§ n
  -- Thanks to the coinductivity of ‚óã-mono, we can get a pure sequent for the
  -- infinite propositions Slist‚àû and Slist‚àû‚â§

  Slist‚àû-repÀ¢‚áíSlist‚àû‚â§ :  Slist‚àû (repÀ¢ n) Œ∏  ‚ä¢[ Œπ ]  Slist‚àû‚â§ n Œ∏
  Slist‚àû-repÀ¢‚áíSlist‚àû‚â§ =  ‚àÉ-elim Œª _ ‚Üí
    ‚àó-mono ≥ (‚ñ°-mono $ ‚óã-mono Œª{ .! ‚Üí Slist‚àû-repÀ¢‚áíSlist‚àû‚â§ }) ¬ª
    ‚àÉ-intro ‚â§-refl ¬ª ‚àÉ-intro _ ¬ª ‚àÉ-intro _

  -- Slist‚àû (rep¬≤À¢ m n) into Slist‚àû‚â§ (m ‚äî n)
  -- Again, the coinductivity of ‚óã-mono is the key

  Slist‚àû-rep¬≤À¢‚áíSlist‚àû‚â§ :  Slist‚àû (rep¬≤À¢ m n) Œ∏  ‚ä¢[ Œπ ]  Slist‚àû‚â§ (m ‚äî n) Œ∏
  Slist‚àû-rep¬≤À¢‚áíSlist‚àû‚â§ =  ‚àÉ-elim Œª _ ‚Üí ‚àó-mono ≥ (‚ñ°-mono $ ‚óã-mono Œª{ .! ‚Üí go }) ¬ª
    ‚àÉ-intro ‚äî-introÀ° ¬ª ‚àÉ-intro _ ¬ª ‚àÉ-intro _
   where
    go :  Slist‚àû (rep¬≤À¢ n m) Œ∏  ‚ä¢[ Œπ ]  Slist‚àû‚â§ (m ‚äî n) Œ∏
    go {n} {m}  rewrite ‚äî-comm {m} {n} =  Slist‚àû-rep¬≤À¢‚áíSlist‚àû‚â§

  -- Turn Slist‚àû nsÀ¢ into Slist (takeÀ¢ k nsÀ¢)
  -- This is under the fancy update ‚áõ, which is transitive,
  -- unlike the later modality ‚ñ∑ in Iris

  Slist‚àû‚áíSlist :  Slist‚àû nsÀ¢ Œ∏  ‚ä¢[ Œπ ][ i ]‚áõ  Slist (takeÀ¢ k nsÀ¢) Œ∏
  Slist‚àû‚áíSlist {k = 0} =  ‚áí‚áõ ‚ä§-intro
  Slist‚àû‚áíSlist {_ ‚à∑À¢ _} {k = ·π° k'} =  ‚àÉ-elim Œª Œ∏' ‚Üí ‚àó-mono ≥ ‚ñ°-elim ¬ª
    ‚áõ-frame ≥ (‚óã-use ·µò¬ª·µò Slist‚àû‚áíSlist {k = k'}) ·µò¬ª ‚àÉ-intro Œ∏'

  -- Use Slist‚àû

  Slist‚àû-use :  Slist‚àû nsÀ¢ Œ∏  ‚ä¢[ Œπ ]‚ü® üû∞_ {T = ‚ó∏ _} (‚àá Œ∏) ‚ü©·µÄ[ i ] Œª (m , Œ∏') ‚Üí
                  ‚åú m ‚â° hdÀ¢ nsÀ¢ ‚åù‚àß Slist‚àû (tlÀ¢ nsÀ¢ .!) Œ∏'
  Slist‚àû-use {_ ‚à∑À¢ _} =  ‚àÉ-elim Œª _ ‚Üí hor-‚Ü¶‚Å±-üû∞ $ hor-val·µò {i = 0} $
    ‚ñ°-elim ¬ª ‚óã-use ·µò¬ª ‚àÉ-intro refl

  -- Turn a self-pointing pointer into Slist‚àû (repÀ¢ n)
  -- The key to this seemingly infinite construction is ‚ñ°‚óã-new-rec

  Slist‚àû-repÀ¢-new :  Œ∏ ‚Ü¶‚Å± (-, n , Œ∏)  ‚ä¢[ Œπ ][ i ]‚áõ  Slist‚àû (repÀ¢ n) Œ∏
  Slist‚àû-repÀ¢-new =  -‚àó-intro ≥ (‚ñ°-intro-Pers $
    ‚àó-mono ≥ (‚ñ°-mono $ ‚óã-mono Œª{ .! ‚Üí ‚ä¢-refl }) ¬ª ‚àÉ-intro _) ¬ª
    ‚ñ°‚óã-new-rec {PÀÇ = ¬°·¥æ _} ·µò¬ª·µò ‚ñ°-elim ¬ª ‚óã-use

  -- Turn two mutually pointing pointers into Slist‚àû (rep¬≤À¢ - -) for both sides
  -- using ‚ñ°‚óã-new-rec

  Slist‚àû-rep¬≤À¢-new :  Œ∏ ‚Ü¶‚Å± (-, m , Œ∏')  ‚àó  Œ∏' ‚Ü¶‚Å± (-, n , Œ∏)  ‚ä¢[ Œπ ][ i ]‚áõ
                        Slist‚àû (rep¬≤À¢ m n) Œ∏  ‚àó  Slist‚àû (rep¬≤À¢ n m) Œ∏'
  Slist‚àû-rep¬≤À¢-new =  -‚àó-introÀ° (‚ñ°-intro-Pers $ dup-Pers-‚àó ¬ª
    ‚àó-mono ≥ ?‚àó-comm ¬ª ‚àó-assocÀ° ¬ª ‚àó-mono
    (‚àó-comm ¬ª ‚àó-mono ≥ (‚ñ°-mono $ ‚óã-mono Œª{ .! ‚Üí ‚àó-elim ≥ }) ¬ª ‚àÉ-intro _)
    (‚àó-comm ¬ª ‚àó-mono ≥ (‚ñ°-mono $ ‚óã-mono Œª{ .! ‚Üí ‚àó-elimÀ° }) ¬ª ‚àÉ-intro _)) ¬ª
    ‚ñ°‚óã-new-rec {PÀÇ = ¬°·¥æ _} ·µò¬ª·µò ‚ñ°-elim ¬ª ‚óã-use
